#include <iostream>
#include <utility> 
 
using namespace std;
/* return the gcd of a and b followed by the pair x and y of 
  equation ax + by = gcd(a,b)
*/
pair<int, pair<int, int> > extendedEuclid(int a, int b) 
{
    int x = 1, y = 0;
    int xLast = 0, yLast = 1;
    int q, r, m, n;
    while (a != 0) 
    {
        q = b / a;
        r = b % a;
        m = xLast - q * x;
        n = yLast - q * y;
        xLast = x; 
        yLast = y;
        x = m; 
        y = n;
        b = a; 
        a = r;
    }
    return make_pair(b, make_pair(xLast, yLast));
}
 
int modInverse(int a, int m) 
{
    return (extendedEuclid(a, m).second.first + m) % m;
}
 
//Main
int main()
{
    int a, m;
    cout<<"Enter number to find modular multiplicative inverse: ";
    cin…
[13:51, 06/06/2023] Susheela Nie Frnd: import java.util.*;  
// create class DiffieHellmanAlgorithmExample to calculate the key for two persons  
class DiffieHellmanAlgorithmExample {  
    // main() method start  
    public static void main(String[] args)  
    {  
        long P, G, x, a, y, b, ka, kb;  
        // create Scanner class object to take input from user  
        Scanner sc = new Scanner(System.in);  
        System.out.println("Both the users should be agreed upon the public keys G and P");  
        // take inputs for public keys from the user  
        System.out.println("Enter value for public key G:");  
        G = sc.nextLong();  
        System.out.println("Enter value for public key P:");  
        P = sc.nextLong();  
        // get input from user for private keys a and…
[13:51, 06/06/2023] Susheela Nie Frnd: #include <iostream>
#include <string>
#include <cctype>

// Function to encrypt the message using the Affine Cipher
std::string encrypt(const std::string& message, int a, int b) {
    std::string encryptedMessage;
    for (char ch : message) {
        if (std::isalpha(ch)) {
            char encryptedChar = (a * (std::toupper(ch) - 'A') + b) % 26 + 'A';
            encryptedMessage += encryptedChar;
        } else {
            encryptedMessage += ch;
        }
    }
    return encryptedMessage;
}

// Function to decrypt the message using the Affine Cipher
std::string decrypt(const std::string& message, int a, int b) {
    // Calculate the multiplicative inverse of 'a' (mod 26)
    int aInverse = -1;
    for (int i = 0; i < 26; ++i) {
        if ((a * i) % 26 == 1) {
            aInverse = i;
            break;
        }
    }

    if (aInverse == -1) {
        std::cout << "Invalid value of 'a'. It must be coprime with 26." << std::endl;
        return "";
    }

    std::string decryptedMessage;
    for (char ch : message) {
        if (std::isalpha(ch)) {
            char decryptedChar = (aInverse * (std::toupper(ch) - 'A' - b + 26)) % 26 + 'A';
            decryptedMessage += decryptedChar;
        } else {
            decryptedMessage += ch;
        }
    }
    return decryptedMessage;
}

int main() {
    std::string message;
    int a, b;

    // Get the message to encrypt or decrypt
    std::cout << "Enter the message: ";
    std::getline(std::cin, message);

    // Get the values of 'a' and 'b'
    std::cout << "Enter the value of 'a': ";
    std::cin >> a;
    std::cout << "Enter the value of 'b': ";
    std::cin >> b;

    // Encrypt the message
    std::string encryptedMessage = encrypt(message, a, b);
    std::cout << "Encrypted message: " << encryptedMessage << std::endl;

    // Decrypt the message
    std::string decryptedMessage = decrypt(encryptedMessage, a, b);
    std::cout << "Decrypted message: " << decryptedMessage << std::endl;

    return 0;
}
